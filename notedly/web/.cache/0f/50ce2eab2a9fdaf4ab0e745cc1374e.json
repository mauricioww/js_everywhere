{"id":"../../api/node_modules/apollo-engine-reporting-protobuf/dist/index.js","dependencies":[{"name":"/home/mauricio/Documents/programming/javascript/js_everywhere/notedly/web/package.json","includedInParent":true,"mtime":1610226516384},{"name":"/home/mauricio/Documents/programming/javascript/js_everywhere/notedly/web/.babelrc","includedInParent":true,"mtime":1610226364784},{"name":"/home/mauricio/Documents/programming/javascript/js_everywhere/notedly/api/node_modules/apollo-engine-reporting-protobuf/package.json","includedInParent":true,"mtime":1610085763234},{"name":"./protobuf","loc":{"line":1,"column":25},"parent":"/home/mauricio/Documents/programming/javascript/js_everywhere/notedly/api/node_modules/apollo-engine-reporting-protobuf/dist/index.js","resolved":"/home/mauricio/Documents/programming/javascript/js_everywhere/notedly/api/node_modules/apollo-engine-reporting-protobuf/dist/protobuf.js"}],"generated":{"js":"const protobuf = require('./protobuf');\n\n// Override the generated protobuf Traces.encode function so that it will look\n// for Traces that are already encoded to Buffer as well as unencoded\n// Traces. This amortizes the protobuf encoding time over each generated Trace\n// instead of bunching it all up at once at sendReport time. In load tests, this\n// change improved p99 end-to-end HTTP response times by a factor of 11 without\n// a casually noticeable effect on p50 times. This also makes it easier for us\n// to implement maxUncompressedReportSize as we know the encoded size of traces\n// as we go.\nconst originalTracesEncode = protobuf.Traces.encode;\nprotobuf.Traces.encode = function(message, originalWriter) {\n  const writer = originalTracesEncode(message, originalWriter);\n  const encodedTraces = message.encodedTraces;\n  if (encodedTraces != null && encodedTraces.length) {\n    for (let i = 0; i < encodedTraces.length; ++i) {\n      writer.uint32(/* id 1, wireType 2 =*/ 10);\n      writer.bytes(encodedTraces[i]);\n    }\n  }\n  return writer;\n};\n\nmodule.exports = protobuf;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../api/node_modules/apollo-engine-reporting-protobuf/dist/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../api/node_modules/apollo-engine-reporting-protobuf/dist/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../api/node_modules/apollo-engine-reporting-protobuf/dist/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../api/node_modules/apollo-engine-reporting-protobuf/dist/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../api/node_modules/apollo-engine-reporting-protobuf/dist/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../api/node_modules/apollo-engine-reporting-protobuf/dist/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../api/node_modules/apollo-engine-reporting-protobuf/dist/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../api/node_modules/apollo-engine-reporting-protobuf/dist/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../api/node_modules/apollo-engine-reporting-protobuf/dist/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../api/node_modules/apollo-engine-reporting-protobuf/dist/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../api/node_modules/apollo-engine-reporting-protobuf/dist/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../api/node_modules/apollo-engine-reporting-protobuf/dist/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../api/node_modules/apollo-engine-reporting-protobuf/dist/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../api/node_modules/apollo-engine-reporting-protobuf/dist/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../api/node_modules/apollo-engine-reporting-protobuf/dist/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../api/node_modules/apollo-engine-reporting-protobuf/dist/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../api/node_modules/apollo-engine-reporting-protobuf/dist/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../api/node_modules/apollo-engine-reporting-protobuf/dist/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../api/node_modules/apollo-engine-reporting-protobuf/dist/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../api/node_modules/apollo-engine-reporting-protobuf/dist/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../api/node_modules/apollo-engine-reporting-protobuf/dist/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../api/node_modules/apollo-engine-reporting-protobuf/dist/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../api/node_modules/apollo-engine-reporting-protobuf/dist/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../api/node_modules/apollo-engine-reporting-protobuf/dist/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../api/node_modules/apollo-engine-reporting-protobuf/dist/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}}],"sources":{"../../api/node_modules/apollo-engine-reporting-protobuf/dist/index.js":"const protobuf = require('./protobuf');\n\n// Override the generated protobuf Traces.encode function so that it will look\n// for Traces that are already encoded to Buffer as well as unencoded\n// Traces. This amortizes the protobuf encoding time over each generated Trace\n// instead of bunching it all up at once at sendReport time. In load tests, this\n// change improved p99 end-to-end HTTP response times by a factor of 11 without\n// a casually noticeable effect on p50 times. This also makes it easier for us\n// to implement maxUncompressedReportSize as we know the encoded size of traces\n// as we go.\nconst originalTracesEncode = protobuf.Traces.encode;\nprotobuf.Traces.encode = function(message, originalWriter) {\n  const writer = originalTracesEncode(message, originalWriter);\n  const encodedTraces = message.encodedTraces;\n  if (encodedTraces != null && encodedTraces.length) {\n    for (let i = 0; i < encodedTraces.length; ++i) {\n      writer.uint32(/* id 1, wireType 2 =*/ 10);\n      writer.bytes(encodedTraces[i]);\n    }\n  }\n  return writer;\n};\n\nmodule.exports = protobuf;\n"},"lineCount":25}},"error":null,"hash":"a5b742378edaefc6c059e1d559ee0fe5","cacheData":{"env":{}}}