{"id":"../../api/node_modules/yallist/iterator.js","dependencies":[{"name":"/home/mauricio/Documents/programming/javascript/js_everywhere/notedly/web/package.json","includedInParent":true,"mtime":1610226516384},{"name":"/home/mauricio/Documents/programming/javascript/js_everywhere/notedly/web/.babelrc","includedInParent":true,"mtime":1610226364784},{"name":"/home/mauricio/Documents/programming/javascript/js_everywhere/notedly/api/node_modules/yallist/package.json","includedInParent":true,"mtime":1610085762907}],"generated":{"js":"'use strict'\nmodule.exports = function (Yallist) {\n  Yallist.prototype[Symbol.iterator] = function* () {\n    for (let walker = this.head; walker; walker = walker.next) {\n      yield walker.value\n    }\n  }\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../api/node_modules/yallist/iterator.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../api/node_modules/yallist/iterator.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../api/node_modules/yallist/iterator.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../api/node_modules/yallist/iterator.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../api/node_modules/yallist/iterator.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../api/node_modules/yallist/iterator.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../api/node_modules/yallist/iterator.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../api/node_modules/yallist/iterator.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../api/node_modules/yallist/iterator.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}}],"sources":{"../../api/node_modules/yallist/iterator.js":"'use strict'\nmodule.exports = function (Yallist) {\n  Yallist.prototype[Symbol.iterator] = function* () {\n    for (let walker = this.head; walker; walker = walker.next) {\n      yield walker.value\n    }\n  }\n}\n"},"lineCount":9}},"error":null,"hash":"2ea95d3409f93024237c37465bbdd051","cacheData":{"env":{}}}