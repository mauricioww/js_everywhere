{"id":"../../api/node_modules/apollo-server-core/dist/graphqlOptions.js","dependencies":[{"name":"/home/mauricio/Documents/programming/javascript/js_everywhere/notedly/api/node_modules/apollo-server-core/dist/graphqlOptions.js.map","includedInParent":true,"mtime":1610085763081},{"name":"/home/mauricio/Documents/programming/javascript/js_everywhere/notedly/api/node_modules/apollo-server-core/src/graphqlOptions.ts","includedInParent":true,"mtime":1610085763077},{"name":"/home/mauricio/Documents/programming/javascript/js_everywhere/notedly/web/package.json","includedInParent":true,"mtime":1610226516384},{"name":"/home/mauricio/Documents/programming/javascript/js_everywhere/notedly/web/.babelrc","includedInParent":true,"mtime":1610226364784},{"name":"/home/mauricio/Documents/programming/javascript/js_everywhere/notedly/api/node_modules/apollo-server-core/package.json","includedInParent":true,"mtime":1610085763077}],"generated":{"js":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction resolveGraphqlOptions(options) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return __awaiter(this, void 0, void 0,\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee() {\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(typeof options === 'function')) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 3;\n            return options.apply(void 0, args);\n\n          case 3:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 6:\n            return _context.abrupt(\"return\", options);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n\nexports.resolveGraphqlOptions = resolveGraphqlOptions;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":59,"column":0},"generated":{"line":35,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":59,"column":22},"generated":{"line":35,"column":9}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":59,"column":0},"generated":{"line":35,"column":30}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":60,"column":2},"generated":{"line":35,"column":31}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":59,"column":0},"generated":{"line":35,"column":38}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":65,"column":21},"generated":{"line":35,"column":40}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":65,"column":21},"generated":{"line":36,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":65,"column":5},"generated":{"line":36,"column":36}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":65,"column":21},"generated":{"line":36,"column":40}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":65,"column":5},"generated":{"line":37,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":65,"column":5},"generated":{"line":37,"column":4}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":65,"column":21},"generated":{"line":37,"column":8}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":65,"column":21},"generated":{"line":38,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":67,"column":6},"generated":{"line":47,"column":18}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":67,"column":13},"generated":{"line":47,"column":25}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":67,"column":6},"generated":{"line":47,"column":32}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":67,"column":25},"generated":{"line":47,"column":37}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":68,"column":11},"generated":{"line":53,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":68,"column":17},"generated":{"line":53,"column":19}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":68,"column":24},"generated":{"line":53,"column":26}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":68,"column":17},"generated":{"line":53,"column":32}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":68,"column":28},"generated":{"line":53,"column":41}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":68,"column":17},"generated":{"line":53,"column":45}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":68,"column":11},"generated":{"line":53,"column":46}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":70,"column":11},"generated":{"line":59,"column":45}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":72,"column":1},"generated":{"line":68,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":59,"column":0},"generated":{"line":70,"column":0}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":59,"column":0},"generated":{"line":70,"column":7}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":59,"column":0},"generated":{"line":70,"column":8}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":59,"column":0},"generated":{"line":70,"column":29}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":59,"column":0},"generated":{"line":70,"column":32}},{"source":"../src/graphqlOptions.ts","name":null,"original":{"line":59,"column":0},"generated":{"line":70,"column":53}}],"sources":{"../src/graphqlOptions.ts":"import {\n  GraphQLSchema,\n  ValidationContext,\n  GraphQLFieldResolver,\n  DocumentNode,\n} from 'graphql';\nimport { GraphQLExtension } from 'graphql-extensions';\nimport { CacheControlExtensionOptions } from 'apollo-cache-control';\nimport { KeyValueCache, InMemoryLRUCache } from 'apollo-server-caching';\nimport { DataSource } from 'apollo-datasource';\nimport { ApolloServerPlugin } from 'apollo-server-plugin-base';\n\n/*\n * GraphQLServerOptions\n *\n * - schema: an executable GraphQL schema used to fulfill requests.\n * - (optional) formatError: Formatting function applied to all errors before response is sent\n * - (optional) rootValue: rootValue passed to GraphQL execution, or a function to resolving the rootValue from the DocumentNode\n * - (optional) context: the context passed to GraphQL execution\n * - (optional) validationRules: extra validation rules applied to requests\n * - (optional) formatResponse: a function applied to each graphQL execution result\n * - (optional) fieldResolver: a custom default field resolver\n * - (optional) debug: a boolean that will print additional debug logging if execution errors occur\n * - (optional) extensions: an array of functions which create GraphQLExtensions (each GraphQLExtension object is used for one request)\n *\n */\nexport interface GraphQLServerOptions<\n  TContext = Record<string, any>,\n  TRootValue = any\n> {\n  schema: GraphQLSchema;\n  formatError?: Function;\n  rootValue?: ((parsedQuery: DocumentNode) => TRootValue) | TRootValue;\n  context?: TContext | (() => never);\n  validationRules?: Array<(context: ValidationContext) => any>;\n  formatResponse?: Function;\n  fieldResolver?: GraphQLFieldResolver<any, TContext>;\n  debug?: boolean;\n  tracing?: boolean;\n  cacheControl?: CacheControlExtensionOptions;\n  extensions?: Array<() => GraphQLExtension>;\n  dataSources?: () => DataSources<TContext>;\n  cache?: KeyValueCache;\n  persistedQueries?: PersistedQueryOptions;\n  plugins?: ApolloServerPlugin[];\n  documentStore?: InMemoryLRUCache<DocumentNode>;\n}\n\nexport type DataSources<TContext> = {\n  [name: string]: DataSource<TContext>;\n};\n\nexport interface PersistedQueryOptions {\n  cache: KeyValueCache;\n}\n\nexport default GraphQLServerOptions;\n\nexport async function resolveGraphqlOptions(\n  options:\n    | GraphQLServerOptions\n    | ((\n        ...args: Array<any>\n      ) => Promise<GraphQLServerOptions> | GraphQLServerOptions),\n  ...args: Array<any>\n): Promise<GraphQLServerOptions> {\n  if (typeof options === 'function') {\n    return await options(...args);\n  } else {\n    return options;\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"21f5fe9a40f2da1a3920aae84522e976","cacheData":{"env":{}}}