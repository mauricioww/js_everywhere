{"id":"../../api/node_modules/apollo-server-core/dist/types.js","dependencies":[{"name":"/home/mauricio/Documents/programming/javascript/js_everywhere/notedly/api/node_modules/apollo-server-core/dist/types.js.map","includedInParent":true,"mtime":1610085763081},{"name":"/home/mauricio/Documents/programming/javascript/js_everywhere/notedly/api/node_modules/apollo-server-core/src/types.ts","includedInParent":true,"mtime":1610085763077},{"name":"/home/mauricio/Documents/programming/javascript/js_everywhere/notedly/web/package.json","includedInParent":true,"mtime":1610226516384},{"name":"/home/mauricio/Documents/programming/javascript/js_everywhere/notedly/web/.babelrc","includedInParent":true,"mtime":1610226364784},{"name":"/home/mauricio/Documents/programming/javascript/js_everywhere/notedly/api/node_modules/apollo-server-core/package.json","includedInParent":true,"mtime":1610085763077},{"name":"graphql-extensions","loc":{"line":3,"column":35},"parent":"/home/mauricio/Documents/programming/javascript/js_everywhere/notedly/api/node_modules/apollo-server-core/dist/types.js","resolved":"/home/mauricio/Documents/programming/javascript/js_everywhere/notedly/api/node_modules/graphql-extensions/dist/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_extensions_1 = require(\"graphql-extensions\");\n\nexports.GraphQLExtension = graphql_extensions_1.GraphQLExtension;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/types.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../src/types.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":7,"column":4}},{"source":"../src/types.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":7,"column":24}},{"source":"../src/types.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":7,"column":27}},{"source":"../src/types.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":7,"column":34}},{"source":"../src/types.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":7,"column":35}},{"source":"../src/types.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":7,"column":55}},{"source":"../src/types.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":7,"column":56}},{"source":"../src/types.ts","name":null,"original":{"line":6,"column":9},"generated":{"line":9,"column":0}},{"source":"../src/types.ts","name":null,"original":{"line":6,"column":9},"generated":{"line":9,"column":7}},{"source":"../src/types.ts","name":null,"original":{"line":6,"column":9},"generated":{"line":9,"column":8}},{"source":"../src/types.ts","name":null,"original":{"line":6,"column":9},"generated":{"line":9,"column":24}},{"source":"../src/types.ts","name":null,"original":{"line":6,"column":9},"generated":{"line":9,"column":27}},{"source":"../src/types.ts","name":null,"original":{"line":6,"column":9},"generated":{"line":9,"column":47}},{"source":"../src/types.ts","name":null,"original":{"line":6,"column":9},"generated":{"line":9,"column":48}},{"source":"../src/types.ts","name":null,"original":{"line":6,"column":9},"generated":{"line":9,"column":64}}],"sources":{"../src/types.ts":"import { GraphQLSchema, DocumentNode } from 'graphql';\nimport { SchemaDirectiveVisitor, IResolvers, IMocks } from 'graphql-tools';\nimport { ConnectionContext } from 'subscriptions-transport-ws';\nimport WebSocket from 'ws';\nimport { GraphQLExtension } from 'graphql-extensions';\nexport { GraphQLExtension } from 'graphql-extensions';\n\nimport { EngineReportingOptions } from 'apollo-engine-reporting';\n\nimport { PlaygroundConfig } from './playground';\nexport { PlaygroundConfig, PlaygroundRenderPageOptions } from './playground';\n\nimport {\n  GraphQLServerOptions as GraphQLOptions,\n  PersistedQueryOptions,\n} from './graphqlOptions';\nimport { CacheControlExtensionOptions } from 'apollo-cache-control';\nimport { ApolloServerPlugin } from 'apollo-server-plugin-base';\n\nimport { GraphQLSchemaModule } from '@apollographql/apollo-tools';\nexport { GraphQLSchemaModule };\n\nexport { KeyValueCache } from 'apollo-server-caching';\n\nexport type Context<T = any> = T;\nexport type ContextFunction<T = any> = (\n  context: Context<T>,\n) => Promise<Context<T>>;\n\n// A plugin can return an interface that matches `ApolloServerPlugin`, or a\n// factory function that returns `ApolloServerPlugin`.\nexport type PluginDefinition = ApolloServerPlugin | (() => ApolloServerPlugin);\n\nexport interface SubscriptionServerOptions {\n  path: string;\n  keepAlive?: number;\n  onConnect?: (\n    connectionParams: Object,\n    websocket: WebSocket,\n    context: ConnectionContext,\n  ) => any;\n  onDisconnect?: (websocket: WebSocket, context: ConnectionContext) => any;\n}\n\n// This configuration is shared between all integrations and should include\n// fields that are not specific to a single integration\nexport interface Config\n  extends Pick<\n    GraphQLOptions<Context<any>>,\n    | 'formatError'\n    | 'debug'\n    | 'rootValue'\n    | 'validationRules'\n    | 'formatResponse'\n    | 'fieldResolver'\n    | 'tracing'\n    | 'dataSources'\n    | 'cache'\n  > {\n  modules?: GraphQLSchemaModule[];\n  typeDefs?: DocumentNode | Array<DocumentNode>;\n  resolvers?: IResolvers;\n  schema?: GraphQLSchema;\n  schemaDirectives?: Record<string, typeof SchemaDirectiveVisitor>;\n  context?: Context<any> | ContextFunction<any>;\n  introspection?: boolean;\n  mocks?: boolean | IMocks;\n  mockEntireSchema?: boolean;\n  engine?: boolean | EngineReportingOptions<Context<any>>;\n  extensions?: Array<() => GraphQLExtension>;\n  cacheControl?: CacheControlExtensionOptions | boolean;\n  plugins?: PluginDefinition[];\n  persistedQueries?: PersistedQueryOptions | false;\n  subscriptions?: Partial<SubscriptionServerOptions> | string | false;\n  //https://github.com/jaydenseric/graphql-upload#type-uploadoptions\n  uploads?: boolean | FileUploadOptions;\n  playground?: PlaygroundConfig;\n}\n\nexport interface FileUploadOptions {\n  //Max allowed non-file multipart form field size in bytes; enough for your queries (default: 1 MB).\n  maxFieldSize?: number;\n  //Max allowed file size in bytes (default: Infinity).\n  maxFileSize?: number;\n  //Max allowed number of files (default: Infinity).\n  maxFiles?: number;\n}\n"},"lineCount":null}},"error":null,"hash":"658d991e53a268cb1a47f79846d508f4","cacheData":{"env":{}}}